openapi: 3.0.3
info:
  title: Supermarket Store API
  description: REST API for managing supermarket store operations
  version: 1.0.0
  contact:
    name: Supermarket Store Team
    email: support@supermarket-store.com

servers:
  - url: http://localhost:8080/api
    description: Development server

paths:
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve a list of all available products in the store
      parameters:
        - name: category
          in: query
          description: Filter products by category
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          description: Minimum price filter
          required: false
          schema:
            type: number
            format: double
        - name: maxPrice
          in: query
          description: Maximum price filter
          required: false
          schema:
            type: number
            format: double
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - Products
      summary: Add a new product
      description: Add a new product to the store inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product data

  /products/{productId}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      tags:
        - Products
      summary: Update product
      description: Update an existing product
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    delete:
      tags:
        - Products
      summary: Delete product
      description: Remove a product from the store inventory
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found

  /cart:
    get:
      tags:
        - Shopping Cart
      summary: Get cart contents
      description: Retrieve all items in the shopping cart
      responses:
        '200':
          description: Cart contents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
    post:
      tags:
        - Shopping Cart
      summary: Add item to cart
      description: Add a product to the shopping cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemRequest'
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Product not found
    delete:
      tags:
        - Shopping Cart
      summary: Clear cart
      description: Remove all items from the shopping cart
      responses:
        '204':
          description: Cart cleared successfully

  /cart/items/{productId}:
    put:
      tags:
        - Shopping Cart
      summary: Update cart item quantity
      description: Update the quantity of a specific item in the cart
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
              required:
                - quantity
      responses:
        '200':
          description: Cart item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Product not found in cart
    delete:
      tags:
        - Shopping Cart
      summary: Remove item from cart
      description: Remove a specific item from the shopping cart
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Item removed from cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Product not found in cart

  /orders:
    get:
      tags:
        - Orders
      summary: Get all orders
      description: Retrieve a list of all orders
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
        - Orders
      summary: Create order
      description: Create a new order from the current cart contents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Cart is empty or invalid order data

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Retrieve a specific order by its ID
      parameters:
        - name: orderId
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Product ID
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          format: double
          description: Product price
        category:
          type: string
          description: Product category
        stockQuantity:
          type: integer
          description: Available stock quantity
        imageUrl:
          type: string
          description: Product image URL
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - name
        - price
        - category
        - stockQuantity

    ProductRequest:
      type: object
      properties:
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          format: double
          minimum: 0
          description: Product price
        category:
          type: string
          description: Product category
        stockQuantity:
          type: integer
          minimum: 0
          description: Available stock quantity
        imageUrl:
          type: string
          description: Product image URL
      required:
        - name
        - price
        - category
        - stockQuantity

    CartItem:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          minimum: 1
          description: Quantity of the product in cart
        subtotal:
          type: number
          format: double
          description: Subtotal for this cart item
      required:
        - product
        - quantity
        - subtotal

    Cart:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totalItems:
          type: integer
          description: Total number of items in cart
        totalPrice:
          type: number
          format: double
          description: Total price of all items in cart
      required:
        - items
        - totalItems
        - totalPrice

    CartItemRequest:
      type: object
      properties:
        productId:
          type: integer
          format: int64
          description: Product ID to add to cart
        quantity:
          type: integer
          minimum: 1
          description: Quantity to add
      required:
        - productId
        - quantity

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Order ID
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          format: double
          description: Total order amount
        status:
          type: string
          enum:
            - PENDING
            - CONFIRMED
            - SHIPPED
            - DELIVERED
            - CANCELLED
          description: Order status
        customerName:
          type: string
          description: Customer name
        customerEmail:
          type: string
          format: email
          description: Customer email
        shippingAddress:
          type: string
          description: Shipping address
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
      required:
        - id
        - items
        - totalAmount
        - status
        - customerName
        - customerEmail

    OrderItem:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          minimum: 1
          description: Quantity ordered
        price:
          type: number
          format: double
          description: Price at time of order
        subtotal:
          type: number
          format: double
          description: Subtotal for this order item
      required:
        - product
        - quantity
        - price
        - subtotal

    OrderRequest:
      type: object
      properties:
        customerName:
          type: string
          description: Customer name
        customerEmail:
          type: string
          format: email
          description: Customer email
        shippingAddress:
          type: string
          description: Shipping address
      required:
        - customerName
        - customerEmail
        - shippingAddress